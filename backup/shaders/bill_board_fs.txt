in vec2 g_texCoord;

layout(location=0) out vec4 color;

layout(binding=0) uniform sampler2DArray diffuseTexture;
layout(binding=1) uniform sampler2DArray emissionTexture;
layout(binding=2) uniform sampler2DArray metallicRoughnessTexture;
layout(binding=3) uniform sampler2DArray bumpmapTexture;
layout(binding=4) uniform samplerCube envMap;
layout(binding=5) uniform sampler2DArray shadowTexture;

layout(binding=8) uniform sampler2DArray permutationTex;
layout(binding=9) uniform sampler2DArray gradientTex;

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Permutation and Gradient Functions /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

int get_permutation(int idx)
{
    return int(texelFetch(permutationTex, ivec3((idx) & 255, 0, 0), 0).r);
}

vec4 get_gradient(int idx)
{
    return texelFetch(gradientTex, ivec3((idx) & 255, 0, 0),0);
}

float access_gradient(float vf)
{
    int v = int(vf);
    return get_gradient( get_permutation(v) ).x;
}

vec2 access_gradient(vec2 vf)
{
    ivec2 v = ivec2(vf);
    return get_gradient( get_permutation(v.x + get_permutation(v.y)) ).xy;
}

vec3 access_gradient(vec3 vf)
{
    ivec3 v = ivec3(vf);
    return get_gradient( get_permutation(v.x + get_permutation(v.y + get_permutation(v.z))) ).xyz;
}

vec4 access_gradient(vec4 vf)
{
    ivec4 v = ivec4(vf);
    return get_gradient( get_permutation(v.x + get_permutation(v.y + get_permutation(v.z + get_permutation(v.w)))) );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Noise functions /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

float randomNumber(inout uint state)
{
    state ^= (state<<13);
    state ^= (state>>17);
    state ^= (state<<15);
    return (state & 0x7fffffff) / float(0x7fffffff);
}

uint wangHash(uint v)
{
    v = 9*( (v >> 16 ) ^ (v ^ 61));
    v ^= (v>>4);
    v = v * 668265261;
    return v ^ (v>>15);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// 3D Noise /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 gradient(vec3 v1)
{
    ivec3 v = ivec3(v1) & 0xfff; 
    uint state = wangHash((v.z << 24) | (v.y << 12) | v.x);
    float vx = randomNumber(state);
    float vy = randomNumber(state);
    float vz = randomNumber(state);
    return normalize(vec3(vx, vy, vz) - vec3(0.5));
}

float noise(vec3 p)
{
    float t, x = p.x, y = p.y, z = p.z;
    float d[8], a[4], b[2];
    vec3 q[8];
    q[0] = vec3(floor(x), ceil(y), floor(z));
    q[1] = vec3(ceil(x), ceil(y), floor(z));
    q[2] = vec3(floor(x), floor(y), floor(z));
    q[3] = vec3(ceil(x), floor(y), floor(z));
    q[4] = vec3(floor(x), ceil(y), ceil(z));
    q[5] = vec3(ceil(x), ceil(y), ceil(z));
    q[6] = vec3(floor(x), floor(y), ceil(z));
    q[7] = vec3(ceil(x), floor(y), ceil(z));
    for(int i = 0; i < 8; i++)
        d[i] = dot(gradient(q[i]), p - q[i]);

    t = smoothstep(0.0, 1.0, fract(p.x));
    a[0] = mix(d[0], d[1], t);
    a[1] = mix(d[2], d[3], t);
    a[2] = mix(d[4], d[5], t);
    a[3] = mix(d[6], d[7], t);

    t = smoothstep(0.0, 1.0, fract(p.y));
    b[0] = mix(a[1], a[0], t);
    b[1] = mix(a[3], a[2], t);

    return mix(b[0], b[1], smoothstep(0.0, 1.0, fract(p.z)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// 2D Noise /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

vec2 gradient(vec2 v1)
{
    //convert to int and keep low 16 bits
    ivec2 v = ivec2(v1) & 0xffff;

    uint state = wangHash((v.y << 16) | v.x); // hash
    float vx = randomNumber(state); //rand x
    float vy = randomNumber(state); //rand y

    //put in range -0.5 -> 0.5 and make unit length
    return normalize(vec2(vx, vy) - vec2(0.5));
}

float noise(vec2 p)
{
    float x = p.x, y = p.y;
    vec2 q[4];
    q[0] = vec2(floor(x), ceil(y));
    q[1] = vec2(ceil(x), ceil(y));
    q[2] = vec2(floor(x), floor(y));
    q[3] = vec2(ceil(x), floor(y));
    float d[4];
    for(int i = 0; i < 4; i++)
    {
        vec2 g = gradient(q[i]);
        vec2 v = p - q[i];
        d[i] = dot(g, v);
    }
    float t = smoothstep(0.0, 1.0, fract(p.x));
    float a[2];
    a[0] = mix(d[0], d[1], t);
    a[1] = mix(d[2], d[3], t);
    t = fract(p.y);
    t = smoothstep(0.0, 1.0, t);
    return mix(a[1], a[0], t);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// 1D Noise /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

float gradient(float v1)
{
    int v = int(v1) & 0xfffff;
    uint state = wangHash(v);
    return (float(randomNumber(state) < 0.5) - 0.5)*2.0;
}

float noise(float p)
{
    float q[2];
    q[0] = floor(p);
    q[1] = ceil(p);
    float d[2];
    for(int i = 0; i < 2; i++)
    {
        float g = gradient(q[i]);
        float v = p - q[i];
        d[i] = dot(g, v);
    }
    return mix(d[0], d[1], smoothstep(0.0, 1.0, fract(p)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Color Space Conversions /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

void convert_sRGB_to_XYZ(inout vec4 c){
    c = vec4(
        0.4124564*c.r + 0.3575761*c.g + 0.1804375*c.b,
        0.2126729*c.r + 0.7151522*c.g + 0.0721750*c.b,
        0.0193339*c.r + 0.1191920*c.g + 0.9503041*c.b,
        c.a
    );
}

void convert_XYZ_to_sRGB(inout vec4 c)
{
    c = vec4(
            3.2404542*c.x + -1.5371385*c.y + -0.4985314*c.z,
            -0.969266*c.x + 1.8760108*c.y + 0.0415560*c.z,
            0.0556434*c.x + -0.204259*c.y + 1.0572252*c.z,
            c.a
        );
}

void convert_XYZ_to_xyY(inout vec4 c)
{
    float denom = c.x + c.y + c.z;
    if(denom != 0)
    {
        float x = c.x / denom;
        float y = c.y / denom;
        float Y = c.y;
        c = vec4(x, y, Y, c.a);
    }
}

void convert_xyY_to_XYZ(inout vec4 c)
{
    float X = 0, Y = 0, Z = 0;
    if(c.y != 0)
    {
        Y = c.z;
        X = (Y*c.x) / c.y;
        Z = (Y*(1 - c.x - c.y)) / c.y;
    }
    c = vec4(X, Y, Z, c.a);
}

void convert_xyY_to_RGB(inout vec4 c)
{
    convert_xyY_to_XYZ(c);
    convert_XYZ_to_sRGB(c);
}

void convert_RGB_to_xyY(inout vec4 c)
{
    convert_sRGB_to_XYZ(c);
    convert_XYZ_to_xyY(c);
}

void animate_three_octave_fire(inout vec2 texPos, inout vec4 c)
{
    float T = time * 32.0;
    vec3 noiseCoord = vec3(texPos.x, texPos.y - T, T * 0.25);
    float noiseVal = noise(noiseCoord);
    float scaler = 0.5, powOfTwo = 2.0;

    for(int i = 0; i < 3; i++)
    {
        noiseVal += scaler * noise(powOfTwo * noiseCoord);
        powOfTwo *= 2.0;
        scaler *= 0.5;
    }
    noiseVal = 0.5*(noiseVal + 1.0); // Offset

    float threshold = -0.1 + texPos.y;
    float s1 = smoothstep( threshold-0.2, threshold+0.2, noiseVal );
    float s2 = smoothstep( threshold-0.2, threshold+0.2, noiseVal - 0.15);
    float s3 = smoothstep( threshold-0.2, threshold+0.2, noiseVal - 0.3);
    float diff1 = s1-s2;
    float diff2 = s2-s3;
    float val1 = mix( diff1, 1.0, diff2 );
    float t = clamp(mix( 0.0, 1.0, val1), 0.01, 0.99);

    c.rgb = texture(diffuseTexture, vec3(t, 0.5, 0)).rgb;
    c.a = s1*s1;
}

void main()
{
    vec2 texPos = g_texCoord;
    if(doNoise > 0)
        texPos *= 8.0;
    color = texture(diffuseTexture, vec3(texPos, 0));
    if ( color.a <= 0.01)
	    discard;

    if(doNoise > 0)
        animate_three_octave_fire(texPos, color);

    if(isHDR > 0)
        convert_RGB_to_xyY(color);
}