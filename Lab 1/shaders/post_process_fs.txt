in vec2 v_texCoord;

layout(location=0) out vec4 color;
layout(binding=0) uniform sampler2DArray unblurred;	
layout(binding=1) uniform sampler2DArray glow;		    // from first fbo on slice 1
layout(binding=2) uniform sampler2DArray blurred;		// from second fbo on slice 0

// 3,4,5 Not Being used
layout(binding=3) uniform sampler2DArray bumpmapTexture;
layout(binding=4) uniform samplerCube envMap;
layout(binding=5) uniform sampler2DArray shadowTexture;

layout(binding=16) uniform sampler2DArray depth;

/////////////////////////////////////////////////////////////////////////////////////////////////////// Color Space Conversions

void convert_sRGB_to_XYZ(inout vec4 c){
    c = vec4(
        0.4124564*c.r + 0.3575761*c.g + 0.1804375*c.b,
        0.2126729*c.r + 0.7151522*c.g + 0.0721750*c.b,
        0.0193339*c.r + 0.1191920*c.g + 0.9503041*c.b,
        c.a
    );
}

void convert_XYZ_to_sRGB(inout vec4 c)
{
    c = vec4(
            3.2404542*c.x + -1.5371385*c.y + -0.4985314*c.z,
            -0.969266*c.x + 1.8760108*c.y + 0.0415560*c.z,
            0.0556434*c.x + -0.204259*c.y + 1.0572252*c.z,
            c.a
        );
}

void convert_XYZ_to_xyY(inout vec4 c)
{
    float denom = c.x + c.y + c.z;
    if(denom > 0)
    {
        float x = c.x / denom;
        float y = c.y / denom;
        float Y = c.y;
        c = vec4(x, y, Y, c.a);
    }
}

void convert_xyY_to_XYZ(inout vec4 c, in float L)
{
    float X = 0, Y = 0, Z = 0;
    if(c.y > 0)
    {
        Y = L;
        X = (Y*c.x) / c.y;
        Z = (Y*(1 - c.x - c.y)) / c.y;
    }
    c = vec4(X, Y, Z, c.a);
}

void convert_xyY_to_sRGB(inout vec4 c, in float L)
{
    convert_xyY_to_XYZ(c, L);
    convert_XYZ_to_sRGB(c);
}

void convert_sRGB_to_xyY(inout vec4 c)
{
    convert_sRGB_to_XYZ(c);
    convert_XYZ_to_xyY(c);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////// Color Correction

void adjust_gamma(inout vec4 colorToAdjust)
{
    colorToAdjust.rgb = pow(colorToAdjust.rgb, vec3(1.0 / gamma));
}

void toneMap(inout vec4 c)
{
    float L_avg = texture( unblurred, vec3(v_texCoord, 0), 100).z;
    float L_scale = (a_lum_val * c.z / L_avg);

    //float L_dodging = (L_scale * (1 + (L_scale / (lum_white * lum_white)) )) / (1 + L_scale);

    convert_xyY_to_sRGB(c, L_scale);

    //c = vec3(1.0) - exp(-c * L_scale);//dodging);
    //adjust_gamma(c);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////// Visual effects

void calculate_DOF(in vec4 unblurred_image, in vec4 blurred_image, inout float depthScaler)
{
    // Calculate depth of Field
    float z = -(Q / (1 - 2 * depthScaler - P));                        // RHS: z goes from 0 -> -infinity
    float delta = abs(z - focalDistance);
    
    // Change sharp-focus range
    depthScaler = smoothstep(focalSmoothStepMin, focalSmoothStepMax, delta);
    
    color.rgb = mix(unblurred_image, blurred_image, depthScaler).rgb;
    color.a = unblurred_image.a;
}

void calculate_glow(in vec4 glowed_image)
{
    color.rgb += glowed_image.rgb;
}

void main()
{
	vec4 unb = texture( unblurred, vec3(v_texCoord, 0.0));	// unblurred texture value from slice 0 of first fbo
	vec4 glow = texture( glow, vec3(v_texCoord, 1.0));		// glow texture value on slice 1 of first fbo
	vec4 bl	= texture( blurred, vec3(v_texCoord, 0.0));		// blurred texture value on slice 0 of second fbo
	float d = texture( depth, vec3(v_texCoord, 0.0)).r;		// Gets Depth scaler

    color = unb;

    //if(color.r < 0 || color.g < 0 || color.b < 0)
    //    color = vec4(1,0,1,1);

	calculate_DOF(unb, bl, d);
	calculate_glow(glow);

    if(isHDR != 0)
	    toneMap(color);
        
}