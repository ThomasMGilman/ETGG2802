#define PI 3.1415926535897932384626433832795

in vec3 v_normal;
in vec3 v_worldPos;
in vec2 v_texcoord;
in vec2 v_bumpcoord;
in vec3 v_tangent;

layout(location=0) out vec4 color;
layout(location=1) out vec4 glow;

layout(binding=0) uniform sampler2DArray diffuseTexture;
layout(binding=1) uniform sampler2DArray emissionTexture;
layout(binding=2) uniform sampler2DArray metallicRoughnessTexture;
layout(binding=3) uniform sampler2DArray bumpmapTexture;
layout(binding=4) uniform samplerCube envMap;

layout(binding=8) uniform sampler2DArray permutationTex;
layout(binding=9) uniform sampler2DArray gradientTex;

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Permutation and Gradient Functions /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

int get_permutation(int idx)
{
    return int(texelFetch(permutationTex, ivec3((idx) & 255, 0, 0), 0).r);
}

vec4 get_gradient(int idx)
{
    return texelFetch(gradientTex, ivec3((idx) & 255, 0, 0),0);
}

float access_gradient(float vf)
{
    int v = int(vf);
    return get_gradient( get_permutation(v) ).x;
}

vec2 access_gradient(vec2 vf)
{
    ivec2 v = ivec2(vf);
    return get_gradient( get_permutation(v.x + get_permutation(v.y)) ).xy;
}

vec3 access_gradient(vec3 vf)
{
    ivec3 v = ivec3(vf);
    return get_gradient( get_permutation(v.x + get_permutation(v.y + get_permutation(v.z))) ).xyz;
}

vec4 access_gradient(vec4 vf)
{
    ivec4 v = ivec4(vf);
    return get_gradient( get_permutation(v.x + get_permutation(v.y + get_permutation(v.z + get_permutation(v.w)))) );
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Noise functions /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

float randomNumber(inout uint state)
{
    state ^= (state<<13);
    state ^= (state>>17);
    state ^= (state<<15);
    return (state & 0x7fffffff) / float(0x7fffffff);
}

uint wangHash(uint v)
{
    v = 9*( (v >> 16 ) ^ (v ^ 61));
    v ^= (v>>4);
    v = v * 668265261;
    return v ^ (v>>15);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// 3D Noise /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 gradient(vec3 v1)
{
    ivec3 v = ivec3(v1) & 0xfff; 
    uint state = wangHash((v.z << 24) | (v.y << 12) | v.x);
    float vx = randomNumber(state);
    float vy = randomNumber(state);
    float vz = randomNumber(state);
    return normalize(vec3(vx, vy, vz) - vec3(0.5));
}

float noise(vec3 p)
{
    float t, x = p.x, y = p.y, z = p.z;
    float d[8], a[4], b[2];
    vec3 q[8];
    q[0] = vec3(floor(x), ceil(y), floor(z));
    q[1] = vec3(ceil(x), ceil(y), floor(z));
    q[2] = vec3(floor(x), floor(y), floor(z));
    q[3] = vec3(ceil(x), floor(y), floor(z));
    q[4] = vec3(floor(x), ceil(y), ceil(z));
    q[5] = vec3(ceil(x), ceil(y), ceil(z));
    q[6] = vec3(floor(x), floor(y), ceil(z));
    q[7] = vec3(ceil(x), floor(y), ceil(z));
    for(int i = 0; i < 8; i++)
        d[i] = dot(gradient(q[i]), p - q[i]);

    t = smoothstep(0.0, 1.0, fract(p.x));
    a[0] = mix(d[0], d[1], t);
    a[1] = mix(d[2], d[3], t);
    a[2] = mix(d[4], d[5], t);
    a[3] = mix(d[6], d[7], t);

    t = smoothstep(0.0, 1.0, fract(p.y));
    b[0] = mix(a[1], a[0], t);
    b[1] = mix(a[3], a[2], t);

    return mix(b[0], b[1], smoothstep(0.0, 1.0, fract(p.z)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// 2D Noise /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

vec2 gradient(vec2 v1)
{
    //convert to int and keep low 16 bits
    ivec2 v = ivec2(v1) & 0xffff;

    uint state = wangHash((v.y << 16) | v.x); // hash
    float vx = randomNumber(state); //rand x
    float vy = randomNumber(state); //rand y

    //put in range -0.5 -> 0.5 and make unit length
    return normalize(vec2(vx, vy) - vec2(0.5));
}

float noise(vec2 p)
{
    float x = p.x, y = p.y;
    vec2 q[4];
    q[0] = vec2(floor(x), ceil(y));
    q[1] = vec2(ceil(x), ceil(y));
    q[2] = vec2(floor(x), floor(y));
    q[3] = vec2(ceil(x), floor(y));
    float d[4];
    for(int i = 0; i < 4; i++)
    {
        vec2 g = gradient(q[i]);
        vec2 v = p - q[i];
        d[i] = dot(g, v);
    }
    float t = smoothstep(0.0, 1.0, fract(p.x));
    float a[2];
    a[0] = mix(d[0], d[1], t);
    a[1] = mix(d[2], d[3], t);
    t = fract(p.y);
    t = smoothstep(0.0, 1.0, t);
    return mix(a[1], a[0], t);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// 1D Noise /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

float gradient(float v1)
{
    int v = int(v1) & 0xfffff;
    uint state = wangHash(v);
    return (float(randomNumber(state) < 0.5) - 0.5)*2.0;
}

float noise(float p)
{
    float q[2];
    q[0] = floor(p);
    q[1] = ceil(p);
    float d[2];
    for(int i = 0; i < 2; i++)
    {
        float g = gradient(q[i]);
        float v = p - q[i];
        d[i] = dot(g, v);
    }
    return mix(d[0], d[1], smoothstep(0.0, 1.0, fract(p)));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Color Space Conversions /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

void convert_sRGB_to_XYZ(inout vec4 c){
    c = vec4(
        0.4124564*c.r + 0.3575761*c.g + 0.1804375*c.b,
        0.2126729*c.r + 0.7151522*c.g + 0.0721750*c.b,
        0.0193339*c.r + 0.1191920*c.g + 0.9503041*c.b,
        c.a
    );
}

void convert_XYZ_to_sRGB(inout vec4 c)
{
    c = vec4(
            3.2404542*c.x + -1.5371385*c.y + -0.4985314*c.z,
            -0.969266*c.x + 1.8760108*c.y + 0.0415560*c.z,
            0.0556434*c.x + -0.204259*c.y + 1.0572252*c.z,
            c.a
        );
}

void convert_XYZ_to_xyY(inout vec4 c)
{
    float denom = c.x + c.y + c.z;
    if(denom != 0)
    {
        float x = c.x / denom;
        float y = c.y / denom;
        float Y = c.y;
        c = vec4(x, y, Y, c.a);
    }
}

void convert_xyY_to_XYZ(inout vec4 c)
{
    float X = 0, Y = 0, Z = 0;
    if(c.y != 0)
    {
        Y = c.z;
        X = (Y*c.x) / c.y;
        Z = (Y*(1 - c.x - c.y)) / c.y;
    }
    c = vec4(X, Y, Z, c.a);
}

void convert_xyY_to_RGB(inout vec4 c)
{
    convert_xyY_to_XYZ(c);
    convert_XYZ_to_sRGB(c);
}

void convert_RGB_to_xyY(inout vec4 c)
{
    convert_sRGB_to_XYZ(c);
    convert_XYZ_to_xyY(c);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Computations /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

//Fresnel Computation for microfacets of material
//Calculates the shininess off the materail at the given angle and its color
vec3 lunaFresnel(float cosPhi, vec3 F0)
{
    vec3 one_minus_F0 = vec3(1.0) - F0;
    return F0 + one_minus_F0 * pow(1.0 - cosPhi, 5.0);
}

// Schlick Specular Calculation
// Uses Fresnel Calculation, Visibility Factor, and Microfacet Distribution
vec3 schlickFresnel(float Mu, float cosPhi, vec3 baseColor)
{
    vec3 F0 = mix(vec3(0.04), baseColor, Mu);
    return lunaFresnel(cosPhi, F0);
}

vec3 cookTorrenceFresnel(float cosPhi, vec3 specularColor)
{
    vec3 k = min(specularColor, vec3(0.99)); //prevent zero denominator
    vec3 sqrtk = sqrt(k);
    vec3 n = (vec3(-1.0) - sqrtk) / (sqrtk - vec3(1.0));
    vec3 q = sqrt(cosPhi * cosPhi - 1.0 + n * n);
    vec3 f1 = q - vec3(cosPhi);
    vec3 f2 = q + vec3(cosPhi);
    vec3 f3 = (f2 * cosPhi) - vec3(1.0);
    vec3 f4 = (f1 * cosPhi) + vec3(1.0);
    vec3 Q1 = f1 / f2;
    Q1 *= Q1;
    vec3 Q2 = f3/f4;
    Q2 *= Q2;
    return 0.5 * Q1 * (1 + Q2);
}

float smithJoint_GGX_Approximation(float cosTheta_in, float cosTheta_out, float RhoSqrd)
{
    
    return 1.0 / ( 2 * 
            (cosTheta_in * sqrt(RhoSqrd + (1.0 - RhoSqrd) * cosTheta_out * cosTheta_out) + 
                cosTheta_out * sqrt(RhoSqrd + (1.0 - RhoSqrd) * cosTheta_in * cosTheta_in)));
}

float trowbridge_Reitz_Computation(float cosPsi, float Rho, float RhoSqrd)
{
    float tmp = Rho / (1.0 + cosPsi * cosPsi * (RhoSqrd - 1.0));
    return 1.0 / PI * tmp * tmp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Normal from Bumpmap texture Calculation /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

void calculateBumpNormal(inout vec3 normal)
{
    //sample bumpmap texture and convert to TBN
    vec4 tmp = texture(bumpmapTexture, vec3(v_bumpcoord, 0.0));
    vec3 v = normalize(vec3((tmp.x * 2) - 1, (tmp.y * 2) - 1, (tmp.z * 2) - 1));

    // Gram-Schmidt calculation for bumpmapping
    vec3 Tangent = normalize(v_tangent - dot(v_tangent, normal) * normal);
    vec3 BiTangent = normalize(cross(normal, Tangent));

    // get n prime for bumpmapping
    normal = v * mat3(Tangent.x, BiTangent.x, normal.x,     //Col 0
                     Tangent.y, BiTangent.y, normal.y,      //Col 1
                     Tangent.z, BiTangent.z, normal.z);     //Col 2

    normal = (normalize(vec4(normal, 0.0)*worldMatrix)).xyz;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Diffuse Calculations /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

vec3 lambert(float cosTheta_in, vec3 baseColor)
{
    return cosTheta_in * baseColor;
}

//F = schlick fresnelComputation;
vec3 schlickDiffuse(vec3 F, vec3 baseColor, float Mu, float cosTheta_in)
{
    vec3 d = mix(0.96 * baseColor, vec3(0), Mu);            //Scale Diffuse for energy conservation
    return (cosTheta_in * (vec3(1.0)-F) * d) / PI;
}

//Sigma = Roughness Factor
vec3 orenNayar(float cosTheta_in, float cosTheta_out,
                float sigma, vec3 L, vec3 V, vec3 N, vec3 diffuseColor)
{
    cosTheta_out = max(0.0, cosTheta_out);
    cosTheta_in = max(0.0, cosTheta_in);
    float sinTheta_out = sqrt(1 - cosTheta_out * cosTheta_out);
    float sinTheta_in = sqrt(1 - cosTheta_in * cosTheta_in);
    float sinA, tanB;

    if(cosTheta_in < cosTheta_out)
    {
        sinA = sinTheta_in;
        tanB = sinTheta_out / (cosTheta_out + 2E-38);   //add tiny val to prevent divide by zero
    }
    else
    {
        sinA = sinTheta_out;
        tanB = sinTheta_in / (cosTheta_in + 2E-38);
    }

    //Gaussian distribution
    float sigmaSqrd = sigma * sigma;

    float A = 1.0 - 0.5 * sigmaSqrd / (sigmaSqrd + 0.33);
    float B = 0.45 * sigmaSqrd / (sigmaSqrd + 0.09);

    vec3 Lprime = normalize(L - cosTheta_in * N);
    vec3 Vprime = normalize(V - cosTheta_out * N);
    float cosAlpha = max(0.0, dot(Lprime, Vprime));
    return cosTheta_in * (A + B * cosAlpha * sinA * tanB) * diffuseColor;
}

vec3 minnaert(float cosTheta_out, float cosTheta_in, float sigma, vec3 baseColor)
{
    return pow(cosTheta_out * cosTheta_in, sigma - 1.0) * baseColor;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Specular Calculations /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Base Phong Specular Calculation
vec3 phong(float cosTheta_out, vec3 L, vec3 N, vec3 V, vec3 baseColor)
{
    if(cosTheta_out < 0)
        return vec3(0);
    vec3 R = reflect(-L, N);
    float dp = max(0.0, dot(V,R));
    return baseColor * pow(dp, shininess);
}

// Luna Specular Calculation
// Uses Fresnel Calculation for small scale roughness of materials at angle based on microfacets
vec3 luna(float cosTheta_out, float cosPsi, float cosPhi, vec3 baseColor)
{
    if(cosTheta_out <= 0)
        return vec3(0);

    return lunaFresnel(cosPhi, baseColor) * (shininess + 8.0)/8.0 * pow(cosPsi, shininess);
}

vec3 schlickSpecular(vec3 F, float Rho, float cosPhi, float cosPsi,
                    vec3 baseColor, float cosTheta_in,
                    float cosTheta_out)
{
    float RhoSqrd = Rho*Rho;
    float V = smithJoint_GGX_Approximation(cosTheta_in, cosTheta_out, RhoSqrd);
    float D = trowbridge_Reitz_Computation(cosPsi, Rho, RhoSqrd);
    return cosTheta_in * F * V * D;
}

vec3 cookTorrance(vec3 baseColor, float roughness, float cosTheta_in, float cosTheta_out, float cosPsi, float cosPhi)
{
    vec3 F = cookTorrenceFresnel(cosPhi, baseColor);
    float A = clamp(2.0 * cosPsi * min(cosTheta_out, cosTheta_in) / cosPhi, 0.0, 1.0);

    float cosPsiSqrd = cosPsi * cosPsi;
    float t = roughness * (1.0 - 1.0 / cosPsiSqrd);
    float M = (roughness * exp(t)) / (4.0 * cosPsiSqrd * cosPsiSqrd);
    return vec3(M) * F * vec3(A) / (cosTheta_out * cosTheta_in * vec3(PI));
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// Lighting and Color Calculations /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

void computeIllumination(vec3 lightPosition, float posOrDir, 
                            vec3 spotDirection, float cosMaxSpotAngle,
                            vec3 lightColor, float cosSpotFadeAngle,
                            vec3 N, vec3 V, float Rho, float Mu,
                            vec3 baseColor, out vec3 diffuseAmount,
                            out vec3 specularAmount)
{
    // Lighting
    vec3 L = lightPosition.xyz - posOrDir * v_worldPos;
    float lightDistance = max(0.0001, length(L));           //prevents division by 0
    L = 1.0 / lightDistance * L;

    float A = 1.0 / (attenuation[0] + lightDistance * (attenuation[1] + lightDistance * attenuation[2]));
    float spotDot = dot(-L, spotDirection);
    float spotF = clamp((spotDot - cosMaxSpotAngle) / (cosSpotFadeAngle - cosMaxSpotAngle), 0.0, 1.0);
    vec3 tmp = spotF * lightColor * A;

    // Angles
    float cosTheta_out = dot(N, V);  //Angle between N and V
    float cosTheta_in = dot(N, L);   //Angle between N and L

    vec3 H = normalize(L + V);       //Half Vector between L and V
    float cosPhi = dot(V, H);        //Angle between V and H
    float cosPsi = dot(H, N);        //Angle between H and N

    //SchlickFresnel
    //vec3 F = schlickFresnel(Mu, cosPhi, baseColor);

    //DiffuseCalculations
    //diffuseAmount = tmp * lambert(cosTheta_in, baseColor);
    //diffuseAmount = tmp * schlickDiffuse(F, baseColor, Mu, cosTheta_in);
    //diffuseAmount = tmp * minnaert(cosTheta_out, cosTheta_in, Rho, baseColor);
    diffuseAmount = tmp * orenNayar(cosTheta_in, cosTheta_out, Rho, L, V, N, baseColor);

    //SpecularCalculations
    //specularAmount = tmp * phong(cosTheta_out, L, N, V, baseColor);
    //specularAmount = tmp * luna(cosTheta_out, cosPsi, cosPhi, baseColor);
    //specularAmount = tmp * schlickSpecular(F, Rho, cosPhi, cosPsi, baseColor, cosTheta_in, cosTheta_out);
    specularAmount = tmp * cookTorrance(baseColor, Rho, cosTheta_in, cosTheta_out, cosPsi, cosPhi);
}

void computeTotalIllumination(float Rho, float Mu, vec3 V, vec3 N, vec3 baseColor, out vec3 totalDiffuseAmount, out vec3 totalSpecularAmount)
{
    totalDiffuseAmount = vec3(0);
    totalSpecularAmount = vec3(0);

    for(int i = 0; i < NUM_LIGHTS; i++)
    {
        vec3 diff, spec;
        computeIllumination(lightPositions[i].xyz, lightPositions[i].w,
                            spotlightDirections[i].xyz, spotlightDirections[i].w,
                            lightColors[i].xyz, lightColors[i].w,
                            N, V, Rho, Mu,
                            baseColor, diff, spec);
        totalDiffuseAmount += diff;
        totalSpecularAmount += spec;
    }
}
///////////////////////////////////////////////////////////////////////////////////////////////////////
////////// MAIN /////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////

void main(){
    if( forceStencilColorFlag != 0.0)
    {
        color = forceStencilColor;
        glow = vec4(0);
        return;
    }
    // Get Normal and calculate surface Normal
    vec3 N = normalize(v_normal);
    calculateBumpNormal(N);

    // Get LookVector and ReflectionVector
    vec3 V = normalize(eyePos - v_worldPos);
    vec3 VR = reflect(-V,N);

    // Set Base Variables to use for Color
    vec3 totalDiffuseColor = vec3(0);
    vec3 totalSpecularColor = vec3(0);
    vec3 reflColor = texture(envMap, VR, roughness).rgb;

    // Get Textures
    vec4 diffuseTextureColor = texture( diffuseTexture, vec3(v_texcoord,sliceNumber) );

    if(diffuseTextureColor.a < 0.01)
        discard;

    vec4 emissionTextureColor = texture( emissionTexture, vec3(v_texcoord,sliceNumber) );
    vec4 roughnessTextureColor = texture( metallicRoughnessTexture, vec3(v_texcoord,sliceNumber) );

    float Rho = roughness * roughnessTextureColor.g;    //Roughness factor
    float Mu = metallicity * roughnessTextureColor.b;     //Metallicity factor

    computeTotalIllumination(Rho, Mu, V, N, diffuseTextureColor.rgb, totalDiffuseColor, totalSpecularColor);
    color.rgb = ambientColor * diffuseTextureColor.rgb +
              totalDiffuseColor  + 
              totalSpecularColor +	//optional: multiply specular by texColor
              emissionTextureColor.rgb +
              (metallicity * reflColor);
    

    color.a = diffuseTextureColor.a;
    if(isHDR > 0)
        convert_RGB_to_xyY(color);

    if(doGlow > 0)
    {
        glow.rgb = emissionTextureColor.rgb + totalSpecularColor;
        glow.a = diffuseTextureColor.a;
        if(isHDR > 0)
            convert_RGB_to_xyY(glow);
    }
    else
        glow = vec4(0);
}
